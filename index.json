{"project": "starry", "project_url": "https://rodluger.github.io/starry", "show_commit_url": "https://github.com/rodluger/starry/commit/", "hash_length": 8, "revision_to_hash": {"699": "5dbec24f1f98daa6e10999c68f79795da6b38974", "970": "ecbb390500611ffed6817474580513f31f122fc7", "971": "598959e7c7856c7a2d02b9b2e1b5159f62baa2e9", "972": "c10bb4446fd7faac70cdcfd04fb2edad02b7b971", "973": "b4144cafbdd5d44f3596c019e8242fb6a56d3868", "974": "8e60dab669491ea7473e6653cdf847237ed0b75a", "977": "a42e2b9444a36646cdb916a651b02794c33660c3", "978": "8eb63e2e98e31086ad04c638d80456bf499af033", "980": "5e11f4c4c57a6e92e48bc8e36c9d4a1346a18e05", "981": "426287169e44a510784f16d36994f639f1aa2388", "1029": "6ec272ef5504459ee28807b8668e16d89a5be292", "1030": "ea9a6fa0966c33b63573a3d8188253ee201eb74e", "1031": "f96a285437407e2df5f2c59c3913616625f2678c", "1072": "883cb38ad649530f36551f0778aacf4b167f128c", "1076": "2653033187a79d2369c0be333bf9d6504b90024c", "1077": "bf9301c739703b7ff5f1676146e76a86b3223c35"}, "revision_to_date": {"699": 1531753584000, "970": 1538065308000, "971": 1538072745000, "972": 1538140073000, "973": 1538142329000, "974": 1538147049000, "977": 1538157905000, "978": 1538157942000, "980": 1538170148000, "981": 1538400246000, "1029": 1539560542000, "1030": 1539560562000, "1031": 1539561338000, "1072": 1541087207000, "1076": 1541094187000, "1077": 1541095506000}, "params": {"Pillow": [""], "arch": ["x86_64"], "cpu": ["Intel(R) Xeon(R) Gold 6128 CPU @ 3.40GHz"], "healpy": [""], "machine": ["ccalin007"], "numpy": [""], "os": ["Linux 3.10.0-862.11.6.el7.x86_64"], "pybind11": [""], "python": ["3.7"], "ram": ["20GB"], "branch": ["master"]}, "graph_param_list": [{"Pillow": "", "arch": "x86_64", "cpu": "Intel(R) Xeon(R) Gold 6128 CPU @ 3.40GHz", "healpy": "", "machine": "ccalin007", "numpy": "", "os": "Linux 3.10.0-862.11.6.el7.x86_64", "pybind11": "", "python": "3.7", "ram": "20GB", "branch": "master"}], "benchmarks": {"map.TimeEvaluate.time_array": {"code": "class TimeEvaluate:\n    def time_array(self, *args):\n        self.map(x=self.x, y=self.y)\n\n    def setup(self, lmax, nwav):\n        self.map = starry.Map(lmax=lmax, nwav=nwav)\n        self.map[:, :] = self.one\n        self.map.axis = [0, 1, 0]\n        self.x = np.linspace(-1, 1, npts)\n        self.y = np.linspace(-1, 1, npts)\n        self.theta = np.linspace(0, 360, npts)\n        self.theta_const = np.ones(npts) * 17.5", "min_run_count": 2, "name": "map.TimeEvaluate.time_array", "number": 0, "param_names": ["lmax", "nwav"], "params": [["2", "5", "10", "20", "30"], ["1", "10"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "aed083bda84fea8a353692c1ec74aecadeeae7a6fa49c6adc5a716cad743808d", "warmup_time": -1}, "map.TimeEvaluate.time_array_with_rotation": {"code": "class TimeEvaluate:\n    def time_array_with_rotation(self, *args):\n        self.map(theta=self.theta, x=self.x, y=self.y)\n\n    def setup(self, lmax, nwav):\n        self.map = starry.Map(lmax=lmax, nwav=nwav)\n        self.map[:, :] = self.one\n        self.map.axis = [0, 1, 0]\n        self.x = np.linspace(-1, 1, npts)\n        self.y = np.linspace(-1, 1, npts)\n        self.theta = np.linspace(0, 360, npts)\n        self.theta_const = np.ones(npts) * 17.5", "min_run_count": 2, "name": "map.TimeEvaluate.time_array_with_rotation", "number": 0, "param_names": ["lmax", "nwav"], "params": [["2", "5", "10", "20", "30"], ["1", "10"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "05f42d801a10dd975d55a570aaec89410379d35f7e7d6253d421319e29f511bb", "warmup_time": -1}, "map.TimeEvaluate.time_array_with_rotation_cached": {"code": "class TimeEvaluate:\n    def time_array_with_rotation_cached(self, *args):\n        self.map(theta=self.theta_const, x=self.x, y=self.y)\n\n    def setup(self, lmax, nwav):\n        self.map = starry.Map(lmax=lmax, nwav=nwav)\n        self.map[:, :] = self.one\n        self.map.axis = [0, 1, 0]\n        self.x = np.linspace(-1, 1, npts)\n        self.y = np.linspace(-1, 1, npts)\n        self.theta = np.linspace(0, 360, npts)\n        self.theta_const = np.ones(npts) * 17.5", "min_run_count": 2, "name": "map.TimeEvaluate.time_array_with_rotation_cached", "number": 0, "param_names": ["lmax", "nwav"], "params": [["2", "5", "10", "20", "30"], ["1", "10"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "88b93759f1ddfc2d2ccc8fad5b2257c375e189a8c9471e97d0c52ab7bb3d74cc", "warmup_time": -1}, "map.TimeEvaluate.time_single": {"code": "class TimeEvaluate:\n    def time_single(self, *args):\n        self.map(x=0.3, y=0.45)\n\n    def setup(self, lmax, nwav):\n        self.map = starry.Map(lmax=lmax, nwav=nwav)\n        self.map[:, :] = self.one\n        self.map.axis = [0, 1, 0]\n        self.x = np.linspace(-1, 1, npts)\n        self.y = np.linspace(-1, 1, npts)\n        self.theta = np.linspace(0, 360, npts)\n        self.theta_const = np.ones(npts) * 17.5", "min_run_count": 2, "name": "map.TimeEvaluate.time_single", "number": 0, "param_names": ["lmax", "nwav"], "params": [["2", "5", "10", "20", "30"], ["1", "10"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "91728bdfdffd38b4cf83af963b2a6392779ac507988c16d54338fd018ae336e6", "warmup_time": -1}, "map.TimeEvaluate.time_single_with_rotation": {"code": "class TimeEvaluate:\n    def time_single_with_rotation(self, *args):\n        self.map(theta=35, x=0.3, y=0.45)\n\n    def setup(self, lmax, nwav):\n        self.map = starry.Map(lmax=lmax, nwav=nwav)\n        self.map[:, :] = self.one\n        self.map.axis = [0, 1, 0]\n        self.x = np.linspace(-1, 1, npts)\n        self.y = np.linspace(-1, 1, npts)\n        self.theta = np.linspace(0, 360, npts)\n        self.theta_const = np.ones(npts) * 17.5", "min_run_count": 2, "name": "map.TimeEvaluate.time_single_with_rotation", "number": 0, "param_names": ["lmax", "nwav"], "params": [["2", "5", "10", "20", "30"], ["1", "10"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ec60d1ea98eb0e5c1f0faf40adc0d5f237921c0d8b3ebb9a5e787eefe1eb41b9", "warmup_time": -1}, "map.TimeIO.time_assign_all_ul": {"code": "class TimeIO:\n    def time_assign_all_ul(self, *args):\n        self.map[:] = np.squeeze(np.ones((self.map.lmax, self.map.nwav)))\n\n    def setup(self, lmax, nwav):\n        self.map = starry.Map(lmax=lmax, nwav=nwav)", "min_run_count": 2, "name": "map.TimeIO.time_assign_all_ul", "number": 0, "param_names": ["lmax", "nwav"], "params": [["2", "5", "10", "20", "30"], ["1", "10"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d06b957a16c1079c5c5c25fffbe039eb972264d2e2dcc87260832c46dc8748c4", "warmup_time": -1}, "map.TimeIO.time_assign_all_ylm": {"code": "class TimeIO:\n    def time_assign_all_ylm(self, *args):\n        self.map[:, :] = np.squeeze(np.ones((self.map.N, self.map.nwav)))\n\n    def setup(self, lmax, nwav):\n        self.map = starry.Map(lmax=lmax, nwav=nwav)", "min_run_count": 2, "name": "map.TimeIO.time_assign_all_ylm", "number": 0, "param_names": ["lmax", "nwav"], "params": [["2", "5", "10", "20", "30"], ["1", "10"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "aa0dcd57f7d42dc2b17727eaab2085e822378ae7fa295cfb30cd75e5d1d728b4", "warmup_time": -1}, "map.TimeIO.time_assign_one_ul": {"code": "class TimeIO:\n    def time_assign_one_ul(self, *args):\n        self.map[1] = self.one\n\n    def setup(self, lmax, nwav):\n        self.map = starry.Map(lmax=lmax, nwav=nwav)", "min_run_count": 2, "name": "map.TimeIO.time_assign_one_ul", "number": 0, "param_names": ["lmax", "nwav"], "params": [["2", "5", "10", "20", "30"], ["1", "10"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6bbf531486c126c38ca1b611b3c451e76ac996d0a23ac43b925d4331ba8ad629", "warmup_time": -1}, "map.TimeIO.time_assign_one_ylm": {"code": "class TimeIO:\n    def time_assign_one_ylm(self, *args):\n        self.map[1, 0] = self.one\n\n    def setup(self, lmax, nwav):\n        self.map = starry.Map(lmax=lmax, nwav=nwav)", "min_run_count": 2, "name": "map.TimeIO.time_assign_one_ylm", "number": 0, "param_names": ["lmax", "nwav"], "params": [["2", "5", "10", "20", "30"], ["1", "10"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "416c3aab970506281dd116f49c39bd4a8f70ca4deb051175419175411b965664", "warmup_time": -1}, "map.TimeIO.time_gaussian": {"code": "class TimeIO:\n    def time_gaussian(self, *args):\n        self.map.add_gaussian(sigma=0.1, amp=1, lat=35, lon=50)\n\n    def setup(self, lmax, nwav):\n        self.map = starry.Map(lmax=lmax, nwav=nwav)", "min_run_count": 2, "name": "map.TimeIO.time_gaussian", "number": 0, "param_names": ["lmax", "nwav"], "params": [["2", "5", "10", "20", "30"], ["1", "10"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a6ccd4d9352a481ce3a4f25b1c4b653ea38c0a9a9d4112c1805c86c454872525", "warmup_time": -1}, "map.TimeIO.time_instantiate": {"code": "class TimeIO:\n    def time_instantiate(self, *args):\n        starry.Map(lmax=self.map.lmax, nwav=self.map.nwav)\n\n    def setup(self, lmax, nwav):\n        self.map = starry.Map(lmax=lmax, nwav=nwav)", "min_run_count": 2, "name": "map.TimeIO.time_instantiate", "number": 0, "param_names": ["lmax", "nwav"], "params": [["2", "5", "10", "20", "30"], ["1", "10"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "de985663bbc57943da64318d45684be655a6b167331b013b6b72665653572dec", "warmup_time": -1}, "map.TimeIO.time_load_array": {"code": "class TimeIO:\n    def time_load_array(self, *args):\n        self.map.load_image(np.ones((100, 100)))\n\n    def setup(self, lmax, nwav):\n        self.map = starry.Map(lmax=lmax, nwav=nwav)", "min_run_count": 2, "name": "map.TimeIO.time_load_array", "number": 0, "param_names": ["lmax", "nwav"], "params": [["2", "5", "10", "20", "30"], ["1", "10"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2c9e9696dd776acc0ed09e214d48e0cb822b33f7cc0410c861d033f9d2269146", "warmup_time": -1}, "map.TimeIO.time_load_image": {"code": "class TimeIO:\n    def time_load_image(self, *args):\n        self.map.load_image(\"earth\")\n\n    def setup(self, lmax, nwav):\n        self.map = starry.Map(lmax=lmax, nwav=nwav)", "min_run_count": 2, "name": "map.TimeIO.time_load_image", "number": 0, "param_names": ["lmax", "nwav"], "params": [["2", "5", "10", "20", "30"], ["1", "10"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c835d59008a15b7863c3d9e2ee7e91b3883764f2a0522e4cc90d67d5fa87011b", "warmup_time": -1}, "map.TimeOccultation.time_array": {"code": "class TimeOccultation:\n    def time_array(self, *args):\n        self.map.flux(xo=self.xo, yo=self.yo, ro=self.ro)\n\n    def setup(self, lmax, nwav, ro, maptype):\n        self.map = starry.Map(lmax=lmax, nwav=nwav)\n        self.map.axis = [0, 1, 0]\n        if maptype == \"y\":\n            self.map[:, :] = self.one\n        elif maptype == \"u\":\n            self.map[:] = self.one\n        else:\n            self.map[:(lmax // 2), :] = np.squeeze(np.ones(((lmax // 2 + 1) ** 2, nwav)))\n            self.map[:(lmax // 2)] = np.squeeze(np.ones((lmax // 2, nwav)))\n        self.theta = np.linspace(0, 360, npts)\n        self.theta_const = np.ones(npts) * 17.5\n        self.ro = ro\n        self.xo = np.linspace(-1 - self.ro, 1 + self.ro, npts)\n        self.yo = np.linspace(-1 - self.ro, 1 + self.ro, npts)", "min_run_count": 2, "name": "map.TimeOccultation.time_array", "number": 0, "param_names": ["lmax", "nwav", "ro", "maptype"], "params": [["2", "5", "10", "20", "30"], ["1", "10"], ["0.1", "100"], ["'y'", "'u'", "'both'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7fe9fe11dc8e0bf9f35816e4e136aa92c052a9177a7b4ec618c3dae760afdd0f", "warmup_time": -1}, "map.TimeOccultation.time_array_with_rotation": {"code": "class TimeOccultation:\n    def time_array_with_rotation(self, *args):\n        self.map.flux(theta=self.theta, xo=self.xo, yo=self.yo, ro=self.ro)\n\n    def setup(self, lmax, nwav, ro, maptype):\n        self.map = starry.Map(lmax=lmax, nwav=nwav)\n        self.map.axis = [0, 1, 0]\n        if maptype == \"y\":\n            self.map[:, :] = self.one\n        elif maptype == \"u\":\n            self.map[:] = self.one\n        else:\n            self.map[:(lmax // 2), :] = np.squeeze(np.ones(((lmax // 2 + 1) ** 2, nwav)))\n            self.map[:(lmax // 2)] = np.squeeze(np.ones((lmax // 2, nwav)))\n        self.theta = np.linspace(0, 360, npts)\n        self.theta_const = np.ones(npts) * 17.5\n        self.ro = ro\n        self.xo = np.linspace(-1 - self.ro, 1 + self.ro, npts)\n        self.yo = np.linspace(-1 - self.ro, 1 + self.ro, npts)", "min_run_count": 2, "name": "map.TimeOccultation.time_array_with_rotation", "number": 0, "param_names": ["lmax", "nwav", "ro", "maptype"], "params": [["2", "5", "10", "20", "30"], ["1", "10"], ["0.1", "100"], ["'y'", "'u'", "'both'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9c75705189c47724639332935b862428b165122ee436f71cc3b0918c31af4def", "warmup_time": -1}, "map.TimeOccultation.time_array_with_rotation_cached": {"code": "class TimeOccultation:\n    def time_array_with_rotation_cached(self, *args):\n        self.map.flux(theta=self.theta_const, xo=self.xo, yo=self.yo, ro=self.ro)\n\n    def setup(self, lmax, nwav, ro, maptype):\n        self.map = starry.Map(lmax=lmax, nwav=nwav)\n        self.map.axis = [0, 1, 0]\n        if maptype == \"y\":\n            self.map[:, :] = self.one\n        elif maptype == \"u\":\n            self.map[:] = self.one\n        else:\n            self.map[:(lmax // 2), :] = np.squeeze(np.ones(((lmax // 2 + 1) ** 2, nwav)))\n            self.map[:(lmax // 2)] = np.squeeze(np.ones((lmax // 2, nwav)))\n        self.theta = np.linspace(0, 360, npts)\n        self.theta_const = np.ones(npts) * 17.5\n        self.ro = ro\n        self.xo = np.linspace(-1 - self.ro, 1 + self.ro, npts)\n        self.yo = np.linspace(-1 - self.ro, 1 + self.ro, npts)", "min_run_count": 2, "name": "map.TimeOccultation.time_array_with_rotation_cached", "number": 0, "param_names": ["lmax", "nwav", "ro", "maptype"], "params": [["2", "5", "10", "20", "30"], ["1", "10"], ["0.1", "100"], ["'y'", "'u'", "'both'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7915ec62b0add6bc8a050ef933bbd188eaaf838eb039fa7899a3bd73cf606034", "warmup_time": -1}, "map.TimeOccultation.time_single": {"code": "class TimeOccultation:\n    def time_single(self, *args):\n        self.map.flux(xo=0.3, yo=0.45, ro=0.1)\n\n    def setup(self, lmax, nwav, ro, maptype):\n        self.map = starry.Map(lmax=lmax, nwav=nwav)\n        self.map.axis = [0, 1, 0]\n        if maptype == \"y\":\n            self.map[:, :] = self.one\n        elif maptype == \"u\":\n            self.map[:] = self.one\n        else:\n            self.map[:(lmax // 2), :] = np.squeeze(np.ones(((lmax // 2 + 1) ** 2, nwav)))\n            self.map[:(lmax // 2)] = np.squeeze(np.ones((lmax // 2, nwav)))\n        self.theta = np.linspace(0, 360, npts)\n        self.theta_const = np.ones(npts) * 17.5\n        self.ro = ro\n        self.xo = np.linspace(-1 - self.ro, 1 + self.ro, npts)\n        self.yo = np.linspace(-1 - self.ro, 1 + self.ro, npts)", "min_run_count": 2, "name": "map.TimeOccultation.time_single", "number": 0, "param_names": ["lmax", "nwav", "ro", "maptype"], "params": [["2", "5", "10", "20", "30"], ["1", "10"], ["0.1", "100"], ["'y'", "'u'", "'both'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "042a3943fa3848d254993b4073e6bb719ccc3d94bd9dabe9f6068e6ff2e36ba8", "warmup_time": -1}, "map.TimeOccultation.time_single_with_rotation": {"code": "class TimeOccultation:\n    def time_single_with_rotation(self, *args):\n        self.map.flux(theta=35, xo=0.3, yo=0.45, ro=0.1)\n\n    def setup(self, lmax, nwav, ro, maptype):\n        self.map = starry.Map(lmax=lmax, nwav=nwav)\n        self.map.axis = [0, 1, 0]\n        if maptype == \"y\":\n            self.map[:, :] = self.one\n        elif maptype == \"u\":\n            self.map[:] = self.one\n        else:\n            self.map[:(lmax // 2), :] = np.squeeze(np.ones(((lmax // 2 + 1) ** 2, nwav)))\n            self.map[:(lmax // 2)] = np.squeeze(np.ones((lmax // 2, nwav)))\n        self.theta = np.linspace(0, 360, npts)\n        self.theta_const = np.ones(npts) * 17.5\n        self.ro = ro\n        self.xo = np.linspace(-1 - self.ro, 1 + self.ro, npts)\n        self.yo = np.linspace(-1 - self.ro, 1 + self.ro, npts)", "min_run_count": 2, "name": "map.TimeOccultation.time_single_with_rotation", "number": 0, "param_names": ["lmax", "nwav", "ro", "maptype"], "params": [["2", "5", "10", "20", "30"], ["1", "10"], ["0.1", "100"], ["'y'", "'u'", "'both'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "71aded29e9d0be27ebaceb61a108032aeb2624d7d0504ea1a4a73747720befc9", "warmup_time": -1}, "map.TimePhaseCurve.time_array": {"code": "class TimePhaseCurve:\n    def time_array(self, *args):\n        self.map.flux(theta=self.theta)\n\n    def setup(self, lmax, nwav, axis):\n        self.map = starry.Map(lmax=lmax, nwav=nwav)\n        self.map[:, :] = self.one\n        self.map.axis = axis\n        self.theta = np.linspace(0, 360, npts)\n        self.theta_const = np.ones(npts) * 17.5", "min_run_count": 2, "name": "map.TimePhaseCurve.time_array", "number": 0, "param_names": ["lmax", "nwav", "axis"], "params": [["2", "5", "10", "20", "30"], ["1", "10"], ["[1, 0, 0]", "[0, 1, 0]", "[0, 0, 1]", "[1, 1, 1]"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5359147e77cb0220b3b6d0badf55c1d9e453dcfaf303873b7c2da54bd11ae879", "warmup_time": -1}, "map.TimePhaseCurve.time_array_cached": {"code": "class TimePhaseCurve:\n    def time_array_cached(self, *args):\n        self.map.flux(theta=self.theta_const)\n\n    def setup(self, lmax, nwav, axis):\n        self.map = starry.Map(lmax=lmax, nwav=nwav)\n        self.map[:, :] = self.one\n        self.map.axis = axis\n        self.theta = np.linspace(0, 360, npts)\n        self.theta_const = np.ones(npts) * 17.5", "min_run_count": 2, "name": "map.TimePhaseCurve.time_array_cached", "number": 0, "param_names": ["lmax", "nwav", "axis"], "params": [["2", "5", "10", "20", "30"], ["1", "10"], ["[1, 0, 0]", "[0, 1, 0]", "[0, 0, 1]", "[1, 1, 1]"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bdef1a9afd1c4f7c556c4686a136514f2ab4f8d0f334b6dde122d4f461ec138c", "warmup_time": -1}, "map.TimePhaseCurve.time_single": {"code": "class TimePhaseCurve:\n    def time_single(self, *args):\n        self.map.flux(theta=17.5)\n\n    def setup(self, lmax, nwav, axis):\n        self.map = starry.Map(lmax=lmax, nwav=nwav)\n        self.map[:, :] = self.one\n        self.map.axis = axis\n        self.theta = np.linspace(0, 360, npts)\n        self.theta_const = np.ones(npts) * 17.5", "min_run_count": 2, "name": "map.TimePhaseCurve.time_single", "number": 0, "param_names": ["lmax", "nwav", "axis"], "params": [["2", "5", "10", "20", "30"], ["1", "10"], ["[1, 0, 0]", "[0, 1, 0]", "[0, 0, 1]", "[1, 1, 1]"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ff1677a586252dde50cebec707b63ce68bf1e75528c6491ee6b89f1524b28826", "warmup_time": -1}, "map.TimeRotate.time_rotate": {"code": "class TimeRotate:\n    def time_rotate(self, *args):\n        self.map.rotate(17.5)\n\n    def setup(self, lmax, nwav, axis):\n        self.map = starry.Map(lmax=lmax, nwav=nwav)\n        self.map[:, :] = self.one\n        self.map.axis = axis", "min_run_count": 2, "name": "map.TimeRotate.time_rotate", "number": 0, "param_names": ["lmax", "nwav", "axis"], "params": [["2", "5", "10", "20", "30"], ["1", "10"], ["[1, 0, 0]", "[0, 1, 0]", "[0, 0, 1]", "[1, 1, 1]"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8051aa2201a14199079959d3e9b7a97b6afcc97a8c985b80724582ac8e3af7ac", "warmup_time": -1}}, "machines": {"ccalin007": {"arch": "x86_64", "cpu": "Intel(R) Xeon(R) Gold 6128 CPU @ 3.40GHz", "machine": "ccalin007", "os": "Linux 3.10.0-862.11.6.el7.x86_64", "ram": "20GB", "version": 1}}, "tags": {"v0.1.2": 699, "v0.2.1": 981, "v0.2.2": 1031}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}